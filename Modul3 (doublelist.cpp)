#include "doublelist.h"

void createList(List &L) 
{
    /**
    * FS : first(L) dan last(L) diset Nil
    */
    first(L)=NULL;
    last(L)=NULL;
}

address alokasi(infotype x) 
{
    /**
    * FS : mengembalikan elemen list baru dengan info = x,
    *      next dan prev elemen = Nil
    */
    address P;
      P = new elmlist;
      info(P)=x;
      next(P)=NULL;
      prev(P)=NULL;
    return P;
}

void dealokasi(address &P) 
{
    /**
    * FS : menghapus elemen yang ditunjuk oleh P
    */
    delete P;
}

void insertFirst(List &L, address P) 
{
    /**
    * IS : List L mungkin kosong
    * FS : elemen yang ditunjuk P menjadi elemen pertama pada List L
    */
    if (first(L)==NULL)
    {
        first(L)=P;
        last(L)=P;
    }
    else
    {
        next(P)=first(L);
        first(L)->prev=P;
        first(L)=P;
    }
}

void insertLast(List &L, address P) 
{
    /**
    * IS : List L mungkin kosong
    * FS : elemen yang ditunjuk P menjadi elemen terakhir pada List L
    */
    if (first(L)==NULL)
        insertFirst(L,P);
    else
    {
        last(L)->next=P;
        prev(P)=last(L);
        last(L)=P;
    }
}

void deleteFirst(List &L, address &P) 
{
    /**
    * IS : List L mungkin kosong
    * FS : elemen pertama di dalam List L dilepas
    *      dan disimpan/ditunjuk oleh P
    */
    if (first(L)==NULL)
        cout<<"No data"<<endl;
    else if (first(L)== last(L))
    {
        P = first(L);
        first(L)=NULL;
        last(L) = NULL;
    }
    else
    {
      P = first(L);
      first(L)=next(P);
      first(L)->prev=NULL;
      next(P)=NULL;
    }
}

void deleteLast(List &L, address &P) 
{
    /**
    * IS : List L mungkin kosong
    * FS : elemen tarakhir di dalam List L dilepas
    *      dan disimpan/ditunjuk oleh P
    */
    if (first(L)==NULL)
        cout<<"No data"<<endl;
    else if(first(L)==last(L))
    {
            P = first(L);
            first(L)=NULL;
            last(L) = NULL;
    }
    else
    {
        P = last(L);
        last(L)=prev(P);
        last(L)->next=NULL;
        prev(P)=NULL;
    }
}

void printInfo(List L) 
{
    /**
    * FS : menampilkan info seluruh elemen list L
    */
    cout<<"print info: ";
    if (first(L)==NULL)
        cout<<"No List"<<endl;
    else
    {
         address P = first(L);
         while(P!=NULL){
            cout<<info(P)<<"->";
            P=next(P);
         }
         cout<<endl;
    }
}


address findElm(List L, infotype x) 
{
    /**
    * IS : List L mungkin kosong
    * FS : mengembalikan elemen dengan info.id = x.id,
           mengembalikan Nil jika tidak ditemukan
    */
    address P = NULL;
    P = first(L);
    while(P!=NULL && info(P)!=x) 
    {
        P = next(P);
    }
    return P;
}

void insertAfter(List &L, address Prec, address P) 
{
    /**
    * IS : Prec mungkin NULL dan P tidak NULL
    * FS : elemen yang ditunjuk P menjadi elemen di belakang elemen yang
    *      ditunjuk pointer Prec
    */
    if(Prec!=NULL) 
    {
        if(next(Prec)==NULL) 
        {
            insertLast(L, P);
        } 
        else 
        {
            next(P) = next(Prec);
            prev(P) = Prec;
            prev(next(Prec)) = P;
            next(Prec) = P;
        }
    } 
    else 
    {
        cout<<"gagal insert after, prec null"<<endl;
    }
}

void deleteAfter(List &L, address Prec, address &P) 
{
    /**
    * IS : Prec mungkin NULL
    * FS : elemen yang berada di belakang elemen Prec dilepas
    *      dan disimpan/ditunjuk oleh P
    */
    if(first(L)!=NULL) 
    {
        if(Prec!=NULL&&Prec!=last(L)) 
        {
            if(next(Prec)==last(L)) 
            {
                deleteLast(L,P);
            } 
            else 
            {
                P = next(Prec);
                next(Prec) = next(P);
                prev(next(P)) = Prec;
                prev(P) = NULL;
                next(P) = NULL;
            }
        } 
        else 
        {
            cout<<"gagal delete after"<<endl;
        }
    } 
    else 
    {
        cout<<"gagal delete after, list kosong"<<endl;
    }
}
